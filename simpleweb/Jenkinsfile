#!groovy

node {
  def appName = "simpleweb"
  def devProject = "development"
  def prodProject = "production"
  def buildImage = "docker.io/centos/go-toolset-7-centos7"
  def smartcheck_url = "SMARTCHECK_URL"
  def smartcheck_username = "SMARTCHECK_USERNAME"
  def smartcheck_password = "SMARTCHECK_PASSWORD"
  def scanID


  stage('Checkout Source') {
    checkout scm
  }

  stage('Compile Source') {
    sh "oc start-build -n ${devProject} --from-dir=. --follow --wait ${appName}-builder"
  }

  stage('Build Image') {
    // Overwrite second stage buildconfig with Dockerfile (if it changed)
    sh "/var/lib/jenkins/scripts/patchbcwithdockerfile ${appName} Dockerfile"
    sh "oc start-build -n ${devProject} ${appName} --follow --wait"
  }

  stage('Scan Image') {
    scanID = sh (script: "/var/lib/jenkins/scripts/initiatescan ${smartcheck_url} ${smartcheck_username} ${smartcheck_password} '${appName} scan' ${devProject}/${appName} latest", returnStdout: true)
  }

  stage('Wait for Scan Completion') {
    sh "/var/lib/jenkins/scripts/waitforscan ${smartcheck_url} ${smartcheck_username} ${smartcheck_password} ${scanID}"
  }

  stage('Check for Vulnerabilities') {
    def results = sh (script: "/var/lib/jenkins/scripts/scanfindings ${smartcheck_url} ${smartcheck_username} ${smartcheck_password} ${scanID}", returnStdout: true)
    def parsedResults = readJSON text: results
    if (parsedResults.findings.vulnerabilities.unresolved.high > 0) {
      error("${parsedResults.findings.vulnerabilities.unresolved.high} high priority vulnerabilities found")
    }
  }

  stage('Integration Test') {
    sh "wget --retry-connrefused --tries=120 --waitretry=1 -q http://${appName}:8080/health -O /dev/null"
  }

  stage("Promote to Prod") {
    input message: "Approve Promotion to Prod?", ok: "Promote"
    sh "oc tag ${devProject}/${appName}:latest ${prodProject}/${appName}:latest"
  }
}
