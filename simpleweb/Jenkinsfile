pipeline {
  environment {
    APP_NAME = "APP_NAME"
    DEV_PROJECT = "DEV_PROJECT"
    PROD_PROJECT = "PROD_PROJECT"
    SMARTCHECK_URL = "SMARTCHECK_URL"
    SMARTCHECK_USERNAME = "SMARTCHECK_USERNAME"
    SMARTCHECK_PASSWORD = "SMARTCHECK_PASSWORD"
  }

  agent any

  stages {
    stage('Compile Source') {
      steps {
        script {
          openshift.withCluster() {
            openshift.withProject(env.DEV_PROJECT) {
              openshift.selector("bc", "${env.APP_NAME}-builder").startBuild("--from-dir=.").logs("-f")
            }
          }
        }
      }
    }
    stage('Build Image') {
      steps {
        // Overwrite second stage buildconfig with Dockerfile (if it changed)
        sh "/var/lib/jenkins/scripts/patchbcwithdockerfile ${env.DEV_PROJECT} ${env.APP_NAME} Dockerfile"
        script {
          openshift.withCluster() {
            openshift.withProject(env.DEV_PROJECT) {
              openshift.selector("bc", env.APP_NAME).startBuild().logs("-f")
            }
          }
        }
      }
    }
    stage('Scan Image') {
      steps {
        script {
          env.SCAN_ID = sh(script: "/var/lib/jenkins/scripts/initiatescan ${env.SMARTCHECK_URL} ${env.SMARTCHECK_USERNAME} ${env.SMARTCHECK_PASSWORD} '${env.APP_NAME} scan' ${env.DEV_PROJECT}/${env.APP_NAME} latest", returnStdout: true)
        }
      }
    }
    stage('Wait for Scan Completion') {
      steps {
        sh(script:"/var/lib/jenkins/scripts/waitforscan ${env.SMARTCHECK_URL} ${env.SMARTCHECK_USERNAME} ${env.SMARTCHECK_PASSWORD} ${env.SCAN_ID}", returnStdout: true)
      }
    }
    stage('Check for Vulnerabilities') {
      steps {
        script {
          def results = sh (script: "/var/lib/jenkins/scripts/scanfindings ${env.SMARTCHECK_URL} ${env.SMARTCHECK_USERNAME} ${env.SMARTCHECK_PASSWORD} ${env.SCAN_ID}", returnStdout: true)
          def parsedResults = readJSON text: results
          if (parsedResults.findings.vulnerabilities.unresolved.high > 0) {
            error("${parsedResults.findings.vulnerabilities.unresolved.high} high priority vulnerabilities found")
          }
        }
      }
    }
    stage('Integration Test') {
      steps {
        sh(script:"wget --retry-connrefused --tries=120 --waitretry=1 -q http://${env.APP_NAME}:8080/health -O /dev/null")
      }
    }
    stage("Promote to Prod") {
      steps {
        input(message: "Approve Promotion to Prod?", ok: "Promote")
        script {
          openshift.withCluster() {
            openshift.tag("${env.DEV_PROJECT}/${env.APP_NAME}:latest", "${env.PROD_PROJECT}/${env.APP_NAME}:latest")
          }
        }
      }
    }
  }
}
